ARG buildarch
ARG BUILDER_IMG
ARG NODE_VERSION
ARG DEBIAN_VERSION
ARG SLIM
FROM ${BUILDER_IMG} as builder
FROM --platform=${buildarch} node:${NODE_VERSION}-${DEBIAN_VERSION}${SLIM}
LABEL maintainer="Karsten Hassel"

USER root

WORKDIR /opt/magic_mirror

# copy startscripts into container:
COPY --chmod=0777 --chown=node:node *.sh /opt/magic_mirror/
COPY --from=builder --chmod=0777 --chown=node:node /opt/magic_mirror /opt/magic_mirror

# procps, arp-scan needed for the module MMM-NetworkScanner
# modules which needs sudo must be run as root, use `user: root` in docker-compose.yaml
ARG GIT_INFO
ARG buildarch
ARG NODE_ENV
ARG DEBIAN_VERSION
ARG SLIM
ARG opt
ARG CONTAINER_PCK_REG_TOKEN
RUN set -e; \
    apt-get update; \
    DEBIAN_FRONTEND=noninteractive apt-get -qy --no-install-recommends install git nano openssl ca-certificates wget tini gnupg; \
    if [ "${opt}" = "oy" ]; then \
      _pck="${_pck} libgtk-3-0 libx11-xcb-dev libnss3-dev libxss1 libxtst6 libasound2 libdrm2 libgbm1 libxshmfence1 fonts-arphic-uming procps arp-scan"; \
      if [ "${buildarch}" != "linux/amd64" ]; then \
        # install pi stuff
        if [ "${DEBIAN_VERSION}" = "bookworm" ]; then \
          _pck="${_pck} libllvm14"; \
        else \
          _pck="${_pck} libllvm11"; \
        fi; \
        _pck="${_pck} libraspberrypi-bin libgl1-mesa-dri libglapi-mesa libsensors5 libdrm-radeon1 libelf1 libdrm-amdgpu1 libdrm-nouveau2 x11-xserver-utils libgpiod-dev gpiod"; \
        wget https://archive.raspbian.org/raspbian.public.key -O - | apt-key add -; \
        echo 'deb http://raspbian.raspberrypi.org/raspbian/ '${DEBIAN_VERSION}' main contrib non-free rpi' | tee -a /etc/apt/sources.list; \
        wget -O - http://archive.raspberrypi.org/debian/raspberrypi.gpg.key | apt-key add -; \
        echo 'deb http://archive.raspberrypi.org/debian/ '${DEBIAN_VERSION}' main ui' | tee -a /etc/apt/sources.list.d/raspi.list; \
        apt-get update; \
      fi; \
    fi; \
    if [ "${NODE_ENV}" = "test" ]; then \
      _pck="${_pck} xvfb"; \
      wget -P /usr/local/lib --header "PRIVATE-TOKEN: $CONTAINER_PCK_REG_TOKEN" "https://gitlab.com/api/v4/projects/18135941/packages/generic/libfaketime/0.0.1/libfaketime.so.1"; \
    fi; \
    DEBIAN_FRONTEND=noninteractive apt-get -qy --no-install-recommends install ${_pck}; \
    DEBIAN_FRONTEND=noninteractive apt-get -qy remove gnupg; \
    if [ -z "${SLIM}" ]; then \
      # need newest version for arm32 so using pip
      DEBIAN_FRONTEND=noninteractive apt-get -qy install python3-dev python3-pip; \
      if [ "${DEBIAN_VERSION}" = "bookworm" ]; then \
        _pip_param="--break-system-packages"; \
      fi; \
      python3 -m pip install RPi.GPIO --no-cache-dir ${_pip_param}; \
      DEBIAN_FRONTEND=noninteractive apt-get -qy remove python3-dev python3-pip; \
      DEBIAN_FRONTEND=noninteractive apt-get -qy autoremove; \
    fi; \
    apt-get clean; \
    rm -rf /var/lib/apt/lists/*; \
    usermod -a -G video node; \
    echo "#!/bin/bash" > /usr/local/bin/sudo; \
    echo 'exec "$@"' >> /usr/local/bin/sudo; \
    chmod +x *.sh /usr/local/bin/sudo; \
    chmod u+rwx,g+rwx,o+rwx /etc; \
    chmod u+rw,g+rw,o+rw /etc/localtime /etc/timezone; \
    git config --system --add safe.directory /opt/magic_mirror; \
    git config core.fileMode false; \
    c_rehash; \
    groupadd --gid 997 gpio; \
    usermod -a -G gpio node; \
    ./build_info.sh "Runtime" "$GIT_INFO"; \
    rm -f build_info.sh;

USER node

ARG NODE_ENV
ENV ELECTRON_DISABLE_SANDBOX=1 \
    DBUS_SESSION_BUS_ADDRESS="unix:path=/var/run/dbus/system_bus_socket" \
    NODE_ENV=${NODE_ENV} \
    MM_OVERRIDE_DEFAULT_MODULES=true \
    MM_OVERRIDE_CSS=true

EXPOSE 8080

ENTRYPOINT ["/usr/bin/tini", "--", "./entrypoint.sh"]
