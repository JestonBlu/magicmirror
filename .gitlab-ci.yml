stages:
  - buildartifacts
  - build
  - test

image: ${CI_REGISTRY}/khassel/container/kaniko:latest

variables:
  GIT_DEPTH: 1
  MAGICMIRROR_VERSION: "v2.16.0"
  NODE_VERSION_MASTER: "lts"
  NODE_VERSION_DEVELOP: "16"
  DEBIAN_VERSION_MASTER: "buster"
  DEBIAN_VERSION_DEVELOP: "buster"

.jobext:
  rules:
  - if: $CI_COMMIT_BRANCH =~ /^(master|develop)$/ && $TASK == "runtime"

.jobextbuild:
  extends: .jobext
  before_script:
    - docker.gitlab.login
    - | 
      # set build arch
      if [ "${imgarch}" = "arm" ]; then
        export buildarch="arm32v7/"
      elif [ "${imgarch}" = "arm64" ]; then
        export buildarch="arm64v8/"
      elif [ "${imgarch}" = "debug" ]; then
        export debug="true"
      elif [ ! "${imgarch}" = "amd64" ]; then
        echo "unsupported image arch: ${imgarch}"
      fi
      # master or not
      if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
        BuilderTag=${MAGICMIRROR_VERSION}
        export NODE_VERSION=${NODE_VERSION_MASTER}
        export DEBIAN_VERSION=${DEBIAN_VERSION_MASTER}
      else
        BuilderTag=${CI_COMMIT_BRANCH}
        export NODE_VERSION=${NODE_VERSION_DEVELOP}
        export DEBIAN_VERSION=${DEBIAN_VERSION_DEVELOP}
      fi
      export BUILDER_IMG="${CI_REGISTRY_IMAGE}:${BuilderTag}_${imgarch}_artifacts"
  after_script:
    - docker.logout

build_artifacts:
  stage: buildartifacts
  variables:
    GitRepo: "https://github.com/MichMich/MagicMirror.git"
  script:
  - |
    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      echo "CI_COMMIT_BRANCH is master"
      BuildRef=${MAGICMIRROR_VERSION}
    else
      echo "CI_COMMIT_BRANCH is not master"
      BuildRef="develop"
    fi
    set | grep -E "BUILDER_IMG=|NODE_VERSION=|buildarch=|BuildRef=|GitRepo="
    if [ "$(skopeo inspect docker://${BUILDER_IMG})" ] && [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      echo "no builder image rebuild"
      exit 0
    fi
    echo "builder image (re)build"
    build --context ./build \
    --dockerfile Dockerfile-artifacts \
    --destination ${BUILDER_IMG} \
    --build-arg NODE_VERSION=${NODE_VERSION} \
    --build-arg DEBIAN_VERSION=${DEBIAN_VERSION} \
    --build-arg buildarch=${buildarch} \
    --build-arg BuildRef=${BuildRef} \
    --build-arg GitRepo=${GitRepo} \
    --build-arg debug=${debug}
  extends: .jobextbuild
  parallel:
    matrix:
      - imgarch: ["amd64", "arm", "arm64", "debug"]

.runtime:
  stage: build
  script:
  - |
    set | grep -E "BUILDER_IMG=|NODE_VERSION=|buildarch="
    build --context ./build \
      --dockerfile Dockerfile-debian \
      --destination ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_${imgarch} \
      --build-arg NODE_VERSION=${NODE_VERSION} \
      --build-arg DEBIAN_VERSION=${DEBIAN_VERSION} \
      --build-arg buildarch=${buildarch} \
      --build-arg BUILDER_IMG=${BUILDER_IMG} \
      --build-arg debug=${debug}

    [ -z "${debug}" ] || exit 0

    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      docker.manifest ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH} latest
      docker.manifest ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH} ${MAGICMIRROR_VERSION}
      docker.sync "${CI_REGISTRY_IMAGE}:latest ${CI_REGISTRY_IMAGE}:${MAGICMIRROR_VERSION}"
    else
      docker.manifest ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH} ${CI_COMMIT_BRANCH}
      docker.sync "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}"
    fi
  extends: .jobextbuild

build_amd64:
  variables:
    imgarch: "amd64"
  needs: ["build_artifacts: [amd64]"]
  extends: .runtime

build_arm:
  variables:
    imgarch: "arm"
  needs: ["build_artifacts: [arm]"]
  extends: .runtime

build_arm64:
  variables:
    imgarch: "arm64"
  needs: ["build_artifacts: [arm64]"]
  extends: .runtime

build_debug:
  variables:
    imgarch: "debug"
  needs: ["build_artifacts: [debug]"]
  extends: .runtime

build_alpine:
  variables:
    imgarch: "amd64"
  stage: build
  needs: ["build_artifacts: [amd64]"]
  script:
  - |
    set | grep -E "BUILDER_IMG=|NODE_VERSION="
    dest="--destination ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_alpine"
    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      dest="${dest} --destination ${CI_REGISTRY_IMAGE}:alpine"
    fi
    build --context ./build \
      --dockerfile Dockerfile-alpine \
      ${dest} \
      --build-arg NODE_VERSION=${NODE_VERSION} \
      --build-arg BUILDER_IMG=${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_${imgarch}
    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      docker.sync "${CI_REGISTRY_IMAGE}:alpine"
    else
      docker.sync "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_alpine"
    fi
  extends: .jobextbuild

# test raspi-image with gpio support and python
build_gpio:
  stage: build
  variables:
    imgarch: "arm"
  script:
  - |
    docker.gitlab.login
    build --context ./build \
      --dockerfile Dockerfile-gpio \
      --destination ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_gpio \
      --build-arg BASE_IMG=${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_arm
  rules:
  - if: $CI_COMMIT_BRANCH =~ /^(master|develop)$/ && $TASK == "gpio"

test_debug:
  stage: test
  needs: ["build_debug"]
  variables:
    GIT_STRATEGY: none
    StartEnv: test
  image: 
    name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_debug
    entrypoint: [""]
  script:
  - /opt/magic_mirror/entrypoint.sh
  extends: .jobext

snyk_amd64:
  stage: test
  image: 
    name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_amd64
    entrypoint: [""]
  script:
  - sudo npm install -g snyk snyk-to-html npm-check-updates
  - snyk auth ${SNYK_TOKEN}
  - cd /opt/magic_mirror
  - snyk test --json | snyk-to-html -o ${CI_PROJECT_DIR}/snyk_results.html || true
  - ncu
  rules:
  - if: $CI_COMMIT_BRANCH =~ /^(master|develop)$/ && $TASK == "snyk"
  artifacts:
    when: always
    paths: 
      - snyk_results.html

pages:
  stage: build
  needs: []
  image: ${CI_REGISTRY}/khassel/jekyll:latest
  script:
    - cp -v .gitlab-ci.yml ${CI_PROJECT_DIR}/pages/_data/gitlab.yml
    - uglify.sh ${CI_PROJECT_DIR}/pages/assets/js
    - cd pages
    - echo 'source "https://rubygems.org"' > Gemfile
    - echo 'gem "jekyll", "~> '${V_JEKYLL}'"' >> Gemfile
    - echo 'gem "minimal-mistakes-jekyll", "~> '${V_MISTAKES}'"' >> Gemfile
    - bundle exec jekyll build -d ${CI_PROJECT_DIR}/public
  artifacts:
    paths:
      - public
  rules:
  - if: ($CI_COMMIT_BRANCH =~ /^(master|develop)$/) && ($TASK == "pages" || $TASK == "runtime")
