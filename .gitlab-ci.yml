stages:
  - build
  - test

include:
  - template: Security/Container-Scanning.gitlab-ci.yml
  - project: "khassel/container"
    file: "/.yaml/docker_readme.yaml"

image: ${CI_REGISTRY}/khassel/container/kaniko:latest

variables:
  GIT_DEPTH: 1
  MAGICMIRROR_VERSION: "v2.23.0"
  NODE_VERSION_MASTER: "18"
  NODE_VERSION_DEVELOP: "20"
  DEBIAN_VERSION: "bullseye"
  GitRepo: "https://github.com/MichMich/MagicMirror.git"
  TOOLBOX_IMG: "${CI_REGISTRY}/khassel/container/toolbox:latest"

.rule:
  rules:
  - if: $TASK == "runtime"

.beforescript:
  before_script:
    - docker.gitlab.login
    - |
      set -e
      artarch="${imgarch}"
      # set build arch
      if [ "${imgarch}" = "arm" ]; then
        export buildarch="arm32v7/"
      elif [ "${imgarch}" = "arm64" ]; then
        export buildarch="arm64v8/"
      elif [ -z "${imgarch%%debug*}" ]; then
        export debug="true"
        artarch="debug"
      elif [ ! "${imgarch}" = "amd64" ]; then
        echo "unsupported image arch: ${imgarch}"
        exit 1
      fi
      # master or not
      if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
        BuilderTag=${MAGICMIRROR_VERSION}
        [ -z "${NODE_VERSION}" ] && export NODE_VERSION=${NODE_VERSION_MASTER}
      else
        BuilderTag=${CI_COMMIT_BRANCH}
        [ -z "${NODE_VERSION}" ] && export NODE_VERSION=${NODE_VERSION_DEVELOP}
      fi
      # Node > v19 not supported in buster:
      [ "${DEBIAN_VERSION}" == "buster" ] && export NODE_VERSION=${NODE_VERSION_MASTER}
      export BUILDER_IMG="${CI_REGISTRY_IMAGE}:${BuilderTag}_${artarch}_artifacts"
      export GIT_INFO="commit=${CI_COMMIT_SHORT_SHA} ref=${CI_COMMIT_REF_NAME} date=${CI_COMMIT_TIMESTAMP} author=${CI_COMMIT_AUTHOR} title=${CI_COMMIT_TITLE}"
  after_script:
    - docker.logout

check_artifacts:
  stage: build
  image: ${TOOLBOX_IMG}
  script:
  - |
    touch buildvars
    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      for arch in "amd64" "arm" "arm64" "debug"; do
        img="${CI_REGISTRY_IMAGE}:${MAGICMIRROR_VERSION}_${arch}_artifacts"
        echo "checking $img ..."
        [ "$(crane config ${img}:${CI_COMMIT_BRANCH} >/dev/null 2>&1)" ] || echo "${arch}_" >> buildvars
      done
      cat buildvars
    fi
  rules:
  - if: $TASK == "runtime"
  artifacts:
    paths:
    - buildvars
  environment:
    name: "$CI_COMMIT_BRANCH/Check Artifacts"

build_artifacts:
  stage: build
  needs:
  - job: check_artifacts
    artifacts: true
  script:
  - |
    set -e
    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      cat buildvars
      if [ "$(cat buildvars | grep ${imgarch}_)" != "${imgarch}_" ]; then
        echo "no builder image rebuild"
        exit 0
      fi
      echo "CI_COMMIT_BRANCH is master"
      BuildRef="${MAGICMIRROR_VERSION}"
    else
      echo "CI_COMMIT_BRANCH is not master"
      BuildRef="develop"
    fi
    set | grep -E "BUILDER_IMG=|NODE_VERSION=|buildarch=|BuildRef=|GitRepo=|PRE_IMGARCH="
    export imgarch=""
    build --context "./build" \
    --dockerfile "Dockerfile-artifacts" \
    --destination "${BUILDER_IMG}" \
    --build-arg NODE_VERSION="${NODE_VERSION}" \
    --build-arg GIT_INFO="${GIT_INFO}" \
    --build-arg buildarch="${buildarch}" \
    --build-arg BuildRef="${BuildRef}" \
    --build-arg GitRepo="${GitRepo}" \
    --build-arg debug="${debug}"
  extends: 
  - .beforescript
  - .rule
  parallel:
    matrix:
      - imgarch: ["amd64", "arm", "arm64", "debug"]
  environment:
    name: "$CI_COMMIT_BRANCH/Build Artifacts $imgarch"

.runtime:
  stage: build
  script:
  - |
    set -e
    [ -z "${SLIM}" ] && export FAT="_fat"
    [ -z "${debug}" ] && export NODE_ENV="production" || export NODE_ENV="test"
    [ "${DEBIAN_VERSION}" == "buster" ] && _suffix="_buster"
    set | grep -E "BUILDER_IMG=|NODE_VERSION=|buildarch=|FAT=|DEBIAN_VERSION="
    build --context "./build" \
      --dockerfile "Dockerfile-debian" \
      --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}${_suffix}${FAT}_${imgarch}" \
      --build-arg NODE_VERSION="${NODE_VERSION}" \
      --build-arg DEBIAN_VERSION="${DEBIAN_VERSION}" \
      --build-arg GIT_INFO="${GIT_INFO}" \
      --build-arg buildarch="${buildarch}" \
      --build-arg BUILDER_IMG="${BUILDER_IMG}" \
      --build-arg SLIM="${SLIM}" \
      --build-arg NODE_ENV="${NODE_ENV}"
  extends: 
  - .beforescript
  - .rule

build_amd64:
  variables:
    imgarch: "amd64"
    SLIM: "-slim"
  needs: ["build_artifacts: [amd64]"]
  extends: .runtime
  environment:
    name: "$CI_COMMIT_BRANCH/Build amd64"

build_amd64_fat:
  variables:
    imgarch: "amd64"
  needs: ["build_artifacts: [amd64]"]
  extends: .runtime
  environment:
    name: "$CI_COMMIT_BRANCH/Build amd64 fat"

build_arm:
  variables:
    imgarch: "arm"
    SLIM: "-slim"
  needs: ["build_artifacts: [arm]"]
  extends: .runtime
  environment:
    name: "$CI_COMMIT_BRANCH/Build arm"

build_arm_fat:
  variables:
    imgarch: "arm"
  needs: ["build_artifacts: [arm]"]
  extends: .runtime
  environment:
    name: "$CI_COMMIT_BRANCH/Build arm fat"

build_arm_buster:
  variables:
    imgarch: "arm"
    SLIM: "-slim"
    DEBIAN_VERSION: "buster"
  needs: ["build_artifacts: [arm]"]
  extends: .runtime
  environment:
    name: "$CI_COMMIT_BRANCH/Build arm buster"

build_arm_buster_fat:
  variables:
    imgarch: "arm"
    DEBIAN_VERSION: "buster"
  needs: ["build_artifacts: [arm]"]
  extends: .runtime
  environment:
    name: "$CI_COMMIT_BRANCH/Build arm buster fat"

build_arm64:
  variables:
    imgarch: "arm64"
    SLIM: "-slim"
  needs: ["build_artifacts: [arm64]"]
  extends: .runtime
  environment:
    name: "$CI_COMMIT_BRANCH/Build arm64"

build_arm64_fat:
  variables:
    imgarch: "arm64"
  needs: ["build_artifacts: [arm64]"]
  extends: .runtime
  environment:
    name: "$CI_COMMIT_BRANCH/Build arm64 fat"

.build_debug:
  variables:
    SLIM: "-slim"
  needs: ["build_artifacts: [debug]"]
  extends: .runtime
  environment:
    name: "$CI_COMMIT_BRANCH/Build Debug"

build_debug20:
  variables:
    imgarch: "debug20"
    NODE_VERSION: "20"
  extends:
  - .runtime
  - .build_debug

build_debug18:
  variables:
    imgarch: "debug18"
    NODE_VERSION: "18"
  extends:
  - .runtime
  - .build_debug

build_debug16:
  variables:
    imgarch: "debug16"
    NODE_VERSION: "16"
  extends:
  - .runtime
  - .build_debug

sync_slim:
  image: ${TOOLBOX_IMG}
  needs:
  - build_amd64
  - build_arm64
  - build_arm
  stage: build
  script:
  - |
    set -e
    set | grep -E "CI_COMMIT_BRANCH=|CI_REGISTRY_IMAGE=|MAGICMIRROR_VERSION="
    docker.gitlab.login
    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      docker.manifest "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}" "latest"
      docker.manifest "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}" "${MAGICMIRROR_VERSION}"
      docker.sync "${CI_REGISTRY_IMAGE}:latest ${CI_REGISTRY_IMAGE}:${MAGICMIRROR_VERSION}"
    else
      docker.manifest "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}" "${CI_COMMIT_BRANCH}"
      docker.sync "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}"
    fi
  after_script:
    - docker.logout
  extends: 
  - .rule
  environment:
    name: "$CI_COMMIT_BRANCH/Docker Sync Debian"
    url: https://hub.docker.com/r/karsten13/magicmirror/tags

sync_fat:
  image: ${TOOLBOX_IMG}
  needs:
  - build_amd64_fat
  - build_arm64_fat
  - build_arm_fat
  stage: build
  script:
  - |
    set -e
    set | grep -E "CI_COMMIT_BRANCH=|CI_REGISTRY_IMAGE=|MAGICMIRROR_VERSION="
    docker.gitlab.login
    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      docker.manifest "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_fat" "fat"
      docker.manifest "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_fat" "${MAGICMIRROR_VERSION}_fat"
      docker.sync "${CI_REGISTRY_IMAGE}:fat ${CI_REGISTRY_IMAGE}:${MAGICMIRROR_VERSION}_fat"
    else
      docker.manifest "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_fat" "${CI_COMMIT_BRANCH}_fat"
      docker.sync "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_fat"
    fi
  after_script:
    - docker.logout
  extends: 
  - .rule
  environment:
    name: "$CI_COMMIT_BRANCH/Docker Sync Debian Fat"
    url: https://hub.docker.com/r/karsten13/magicmirror/tags

build_alpine:
  needs: ["build_artifacts: [amd64]"]
  variables:
    imgarch: "amd64"
  stage: build
  script:
  - |
    set -e
    set | grep -E "BUILDER_IMG=|NODE_VERSION="
    dest="--destination ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_alpine"
    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      dest="${dest} --destination ${CI_REGISTRY_IMAGE}:alpine"
    fi
    build --context "./build" \
      --dockerfile "Dockerfile-alpine" \
      ${dest} \
      --build-arg NODE_VERSION="${NODE_VERSION}" \
      --build-arg GIT_INFO="${GIT_INFO}" \
      --build-arg BUILDER_IMG="${BUILDER_IMG}"
  extends: 
  - .beforescript
  - .rule
  environment:
    name: "$CI_COMMIT_BRANCH/Build Alpine"

sync_alpine:
  needs: 
  - build_alpine
  image: ${TOOLBOX_IMG}
  stage: build
  script:
  - |
    set -e
    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      docker.sync "${CI_REGISTRY_IMAGE}:alpine"
    else
      docker.sync "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_alpine"
    fi
  extends: 
  - .rule
  environment:
    name: "$CI_COMMIT_BRANCH/Docker Sync Alpine"
    url: https://hub.docker.com/r/karsten13/magicmirror/tags

sync_buster:
  needs: 
  - build_arm_buster
  - build_arm_buster_fat
  image: ${TOOLBOX_IMG}
  stage: build
  script:
  - |
    set -e
    crane auth login "registry.gitlab.com" -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}"
    crane auth login "docker.io" -u "${DOCKER_USER}" -p "${DOCKER_PASS}"
    [ "${CI_COMMIT_BRANCH}" = "master" ] || _suffix="${CI_COMMIT_BRANCH}_"
    crane copy "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_buster_fat_arm" "${DOCKER_USER}/magicmirror:${_suffix}buster_fat"
    crane copy "${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_buster_arm" "${DOCKER_USER}/magicmirror:${_suffix}buster"
  extends: 
  - .rule
  environment:
    name: "$CI_COMMIT_BRANCH/Docker Sync Buster"
    url: https://hub.docker.com/r/karsten13/magicmirror/tags

build_distroless:
  variables:
    imgarch: "amd64"
  stage: build
  script:
  - |
    set -e
    docker.gitlab.login
    export NODE_VERSION="16"
    export BUILDER_IMG="${CI_REGISTRY_IMAGE}:develop_${imgarch}_artifacts"
    set | grep -E "BUILDER_IMG=|NODE_VERSION="
    build --context ./build \
      --dockerfile Dockerfile-distroless \
      --destination ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_distroless \
      --build-arg NODE_VERSION=${NODE_VERSION} \
      --build-arg BUILDER_IMG=${BUILDER_IMG}
  rules:
  - if: $TASK == "distroless"
  after_script:
    - docker.logout
  environment:
    name: "$CI_COMMIT_BRANCH/Build Distroless"

test_alpine:
  stage: test
  needs: ["build_alpine"]
  variables:
    GIT_STRATEGY: none
  image: 
    name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_alpine
    entrypoint: [""]
  script:
  - |
    set -e
    cd /opt/magic_mirror
    git log -1 > /tmp/image.txt
    if [ "${CI_COMMIT_BRANCH}" = "master" ]; then
      echo "CI_COMMIT_BRANCH is master"
      BuildRef="${MAGICMIRROR_VERSION}"
    else
      echo "CI_COMMIT_BRANCH is not master"
      BuildRef="develop"
    fi
    cd /tmp
    git clone --depth 1 -b "${BuildRef}" --single-branch "${GitRepo}" mm
    cd mm
    git log -1 > /tmp/clone.txt
    cat /tmp/image.txt
    echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
    cat /tmp/clone.txt
    echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
    diff /tmp/image.txt /tmp/clone.txt
    echo "no diffs detected."
  extends: .rule
  environment:
    name: "$CI_COMMIT_BRANCH/Test Alpine"

.test_debug:
  stage: test
  variables:
    GIT_STRATEGY: none
    StartEnv: test
  script:
  - /opt/magic_mirror/entrypoint.sh
  extends: .rule
  environment:
    name: "$CI_COMMIT_BRANCH/Test MagicMirror"

test_debug20:
  needs: ["build_debug20"]
  image: 
    name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_debug20
    entrypoint: [""]
  extends: .test_debug

test_debug18:
  needs: ["build_debug18"]
  image: 
    name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_debug18
    entrypoint: [""]
  extends: .test_debug

test_debug16:
  needs: ["build_debug16"]
  image: 
    name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_debug16
    entrypoint: [""]
  extends: .test_debug

snyk_amd64:
  stage: test
  image: 
    name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_debug20
    entrypoint: [""]
  script:
  - sudo npm install -g snyk npm-check-updates
  - cd /opt/magic_mirror
  - ncu --deep
  - ncu --deep --target minor
  - snyk auth ${SNYK_TOKEN}
  - snyk test --all-projects
  rules:
  - if: $TASK == "snyk"
  environment:
    name: "$CI_COMMIT_BRANCH/Snyk Security Scan"

pages:
  stage: build
  image: ${CI_REGISTRY}/khassel/jekyll:latest
  script:
    - cp -v .gitlab-ci.yml ${CI_PROJECT_DIR}/pages/_data/gitlab.yml
    - uglify.sh ${CI_PROJECT_DIR}/pages/assets/js
    - cd pages
    - cp -v $HOME/Gemfile .
    - bundle exec jekyll build -d ${CI_PROJECT_DIR}/public
  artifacts:
    paths:
      - public
  rules:
  - if: $TASK == "pages"
  - if: $CI_COMMIT_BRANCH == "master" && $TASK == "runtime"
  environment:
    name: "$CI_COMMIT_BRANCH/Documentation"
    url: https://khassel.gitlab.io/magicmirror/

# see https://docs.gitlab.com/ee/user/application_security/container_scanning/
# see https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Security/Container-Scanning.gitlab-ci.yml
container_scanning:
  variables:
    DOCKER_IMAGE: karsten13/magicmirror:develop
    DOCKERFILE_PATH: build/Dockerfile-debian
    GIT_STRATEGY: fetch
  rules:
  - if: $TASK == "containerscan"
  environment:
    name: "$CI_COMMIT_BRANCH/Gitlab Security Scan"

triage:
  # Links:
  # https://about.gitlab.com/handbook/marketing/strategic-marketing/getting-started/105/
  # https://medium.com/analytics-vidhya/gitlab-triage-bot-ba8afca4440a
  # https://gitlab.com/gitlab-org/ruby/gems/gitlab-triage/-/blob/master/README.md
  stage: test
  image: ruby:2.7
  script:
    - gem install gitlab-triage
    - gitlab-triage --token $TRIAGE_API_TOKEN --source projects --source-id $CI_PROJECT_PATH
  rules:
  - if: $TASK == "triage"
  environment:
    name: "$CI_COMMIT_BRANCH/Triage"


sync_readme:
  stage: build
  needs:
  - sync_slim
  - sync_fat
  - sync_alpine
  extends: .docker_readme
  rules:
  - if: $TASK == "readme"
  - if: $CI_COMMIT_BRANCH == "master" && $TASK == "runtime"
  environment:
    name: "$CI_COMMIT_BRANCH/Docker Readme"
    url: https://hub.docker.com/r/karsten13/magicmirror

test_manual_build:
  stage: test
  variables:
    # defaults
    NODE_VERSION: "20"
    BuildRef: "develop"
  script:
  - |
    build --context "./build" \
    --dockerfile "Dockerfile-test" \
    --destination "${CI_REGISTRY_IMAGE}:test" \
    --build-arg DEBIAN_VERSION="${DEBIAN_VERSION}" \
    --build-arg NODE_VERSION="${NODE_VERSION}" \
    --build-arg BuildRef="${BuildRef}" \
    --build-arg GitRepo="${GitRepo}"
  rules:
  - if: $TASK == "manual"

test_manual_run:
  stage: test
  image: ${CI_REGISTRY_IMAGE}:test
  variables:
    GIT_STRATEGY: none
  needs:
  - test_manual_build
  script:
  - |
    echo "start tests ..."
    export DISPLAY=:99
    Xvfb :99 -screen 0 1024x768x16 &
    cd /home/node/mm
    npm run test:prettier
    npm run test:js
    npm run test:css
    npm run test:unit
    npm run test:e2e
    npm run test:electron
  rules:
  - if: $TASK == "manual"
