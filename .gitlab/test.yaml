.test_debug:
  stage: test
  variables:
    GIT_STRATEGY: none
    STARTENV: test
  script:
  - /opt/magic_mirror/entrypoint.sh
  extends:
  - .rulenomaster
  environment:
    name: "$CI_COMMIT_BRANCH/Test MagicMirror"

test_debug20:
  needs: ["build_debug20"]
  image: 
    name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_debug20
    entrypoint: [""]
  extends: .test_debug

test_debug22:
  needs: ["build_debug22"]
  image: 
    name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_debug22
    entrypoint: [""]
  extends: .test_debug

test_electron_rebuild:
  stage: test
  variables:
    GIT_STRATEGY: none
  image: 
    name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_fat_amd64
    entrypoint: [""]
  script:
  - |
    cd /opt/magic_mirror
    echo "electron version:"
    npx electron -v
    echo "install additional dependencies:"
    npm install @electron/rebuild onoff node-pty drivelist
    echo "electron-rebuild version:"
    npx electron-rebuild --version
    echo "run electron-rebuild:"
    npx electron-rebuild
  rules:
  - if: $TASK == "electronrebuild"
  - if: $TASK == "runtime" && $CI_COMMIT_BRANCH != "master"
    needs: ["build_amd64_fat"]
  environment:
    name: "$CI_COMMIT_BRANCH/Test Electron rebuild"

snyk_amd64:
  stage: test
  image: 
    name: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_BRANCH}_debug22
    entrypoint: [""]
  script:
  - cd /opt/magic_mirror
  - npm install snyk npm-check-updates
  - npx ncu --deep
  - npx ncu --deep --target minor
  - npx snyk auth ${SNYK_TOKEN}
  - npx snyk test --all-projects
  rules:
  - if: $TASK == "snyk"
  environment:
    name: "$CI_COMMIT_BRANCH/Snyk Security Scan"

# see https://docs.gitlab.com/ee/user/application_security/container_scanning/
# see https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Security/Container-Scanning.gitlab-ci.yml
container_scanning:
  stage: test
  variables:
    DOCKER_IMAGE: karsten13/magicmirror:develop
    DOCKERFILE_PATH: build/Dockerfile-debian
    GIT_STRATEGY: fetch
  rules:
  - if: $TASK == "containerscan"
  environment:
    name: "$CI_COMMIT_BRANCH/Gitlab Security Scan"

triage:
  # Links:
  # https://about.gitlab.com/handbook/marketing/strategic-marketing/getting-started/105/
  # https://medium.com/analytics-vidhya/gitlab-triage-bot-ba8afca4440a
  # https://gitlab.com/gitlab-org/ruby/gems/gitlab-triage/-/blob/master/README.md
  stage: test
  image: ruby:latest
  script:
    - gem install gitlab-triage
    - gitlab-triage --token $TRIAGE_API_TOKEN --source projects --source-id $CI_PROJECT_PATH
  rules:
  - if: $TASK == "triage"
  environment:
    name: "$CI_COMMIT_BRANCH/Triage"

test_manual_build:
  stage: test
  variables:
    # defaults
    NODE_VERSION: $NODE_VERSION_DEVELOP
    BuildRef: "develop"
  script:
  - |
    build --context "./build" \
    --dockerfile "Dockerfile-test" \
    --destination "${CI_REGISTRY_IMAGE}:test" \
    --build-arg DEBIAN_VERSION="${DEBIAN_VERSION}" \
    --build-arg NODE_VERSION="${NODE_VERSION}" \
    --build-arg BuildRef="${BuildRef}" \
    --build-arg GitRepo="${GitRepo}"
  rules:
  - if: $TASK == "manual"

test_manual_run:
  stage: test
  image: ${CI_REGISTRY_IMAGE}:test
  variables:
    GIT_STRATEGY: none
  needs:
  - test_manual_build
  script:
  - |
    echo "start tests ..."
    export DISPLAY=:99
    Xvfb :99 -screen 0 1024x768x16 &
    cd /home/node/mm
    npm run test:prettier
    npm run test:js
    npm run test:css
    npm run test:unit
    npm run test:e2e
    npm run test:electron
  rules:
  - if: $TASK == "manual"
